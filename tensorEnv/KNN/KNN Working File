import sklearn
from sklearn.utils import shuffle
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd
import numpy as np
from sklearn import linear_model, preprocessing

# Leemos del fichero con datos
data = pd.read_csv("car.data")

# El algoritmo solo admite valores numericos, por lo que debemos parsear todos los tipos no numericos

# Creamos el objeto que realizara el cambio
le = preprocessing.LabelEncoder()

# Crea un con todos los valores de cada columna en car.data transformados en int
buying = le.fit_transform(list(data["buying"]))
maint = le.fit_transform(list(data["maint"]))
door = le.fit_transform(list(data["door"]))
persons = le.fit_transform(list(data["persons"]))
lug_boot = le.fit_transform(list(data["lug_boot"]))
safety = le.fit_transform(list(data["safety"]))


# No lo nombramos class porque es lo que queremos predecir
cls = le.fit_transform(list(data["class"]))

predict = "class"

# Convierte todos las diferentes listas en una gran lista
X = list(zip(buying, maint, door, persons, lug_boot, safety))
y = list(cls)

# x_train, y_train: Secciones de x e y, respectivamente
# x_test, y_test: Datos para comprobar la precision del modelo creado
# Separamos los datos entre datos de entrenamiento y datos de prueba. Usaremos 90% de nuestros datos como entrenamiento
# y el 10% restante de prueba.
# Hacemos esto para que no probemos el modelo con datos que ya se han visto.
x_train, x_test,y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size=0.1)

# Creamos el clasificador
model = KNeighborsClassifier(n_neighbors=5)

# Ajustamos el modelo a los datos
model.fit(x_train, y_train)

# Declaramos la precision
acc = model.score(x_test, y_test)
print(acc)

# Nombres a los que clasifica nuestro clasificador
names = ["unacc", "acc", "good", "vgood"]

# Predecimos el resultado del clasificador
predicted = model.predict(x_test)

# Para cada elemento predecido
for x in range(len(predicted)):
    # Al utilizar la lista "names", transforma los indices en palabras
    print("Predicted: ", names[predicted[x]], "Data : ", x_test[x], "Actual: ", names[y_test[x]])
    # Hemos de pasarle el dato como una lista debido a que el metodo solo interpreta valores de dos dimensiones
    n = model.kneighbors([x_test[x]], 9, True)
    print("N : ", n)

# Explicacion para un resultado aleatorio
# Predicted:  unacc Data :  (0, 2, 2, 1, 0, 2) Actual:  unacc

# N :  (array([[1., 1., 1., 1., 1., 1., 1., 1., 1.]]),             DISTANCIA ENTRE EL RESTO DE LOS K VECINOS
# array([[1031,  473, 1355,  307,  488, 1299,  461,  686,  215]],  INDICE DE CADA UNO DE LOS VECINOS 
# dtype=int64))